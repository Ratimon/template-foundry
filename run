#!/bin/bash
PATH=./bin:$PATH

# -------------------------------------------------------------------------------------------------
# PARAMETERS
# -------------------------------------------------------------------------------------------------
forge_deploy="0.0.16"
forge_std="1.5.3"

# -------------------------------------------------------------------------------------------------
# TASKS
# Run them with ./run <tast> [args...]
# -------------------------------------------------------------------------------------------------

function compile {
    gen_deployer && forge build $@
}

function gen_deployer {
    forge-deploy gen-deployer
}

function export {
    forge-deploy export $1 $2
}

function sync {
    forge-deploy sync
}

function test {
    gen_deployer && forge test $@
}

function watch {
    # bash need to specified for windows
    watchexec -w script -w src bash ./run compile $@
}

function watch_deploy {
    # bash need to specified for windows
    watchexec -w src -w script bash ./run deploy $@
}

function deploy {
	context=${1:-localhost}
	export=false
	export_path=""
	rest="${@:2}"
	if [[ $1 == "--export" ]]; then
		context=${3:-localhost}
		export_path=$2
		export=true
		rest="${@:4}"
	elif [[ $2 == "--export" ]]; then
		export_path=${3:-localhost}
		export=true
		rest="${@:4}"
	fi

    if [[ $context == void ]]; then
        ldenv forge @@ $context script script/Deploy.s.sol --private-key @@DEPLOYER_PRIVATE_KEY $rest;
    else
        ldenv forge @@ $context script script/Deploy.s.sol --private-key @@DEPLOYER_PRIVATE_KEY --rpc-url @@RPC_URL_:DEPLOYMENT_CONTEXT,RPC_URL --broadcast $rest && forge-deploy sync;
    fi;
	if $export; then
		forge-deploy export $context $export_path
	fi;
}

function script {
    ldenv forge @@ ${1:-localhost} script --private-key @@DEPLOYER_PRIVATE_KEY --rpc-url @@RPC_URL_:DEPLOYMENT_CONTEXT,RPC_URL --broadcast "${@:2}";
}

function local_node {
	rm -Rf deployments/localhost;
	anvil $@;
}

function start {
    zellij --layout zellij.kdl a template-foundry || zellij --layout zellij.kdl -s template-foundry
}
function stop {
    zellij kill-session template-foundry
}

function start:wezterm {
    wezterm --config-file wezterm.lua start `pwd`
}


# -------------------------------------------------------------------------------------------------
# DEFAULT COMMANDS
# -------------------------------------------------------------------------------------------------

function _default {
    `compgen -A function | while read line; do if [[ $line != _* ]]; then echo $line; fi done | fzf` $@
}

function help {
    echo "$0 <task> <args>"
    echo "Tasks:"
    compgen -A function | cat -n
}

# -------------------------------------------------------------------------------------------------
# INSTALLATION
# -------------------------------------------------------------------------------------------------
function _install_if_missing {
    if ! foobar_loc="$(type -p $1)" || [[ -z $foobar_loc ]]; then
        echo "$1 missing, installing...";
        $2;
        return $?;
    fi
}

function _install_cargo {
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y && PATH="$PATH:$HOME/.cargo/bin";
}

function _install_foundry {
    curl -L https://foundry.paradigm.xyz | bash || exit 1;
    PATH="$PATH:$HOME/.foundry/bin";
    foundryup || exit 1;
}
function _install_ldenv {
    cargo install --locked ldenv;
}
function _install_fzf {
    git clone --depth 1 https://github.com/junegunn/fzf.git $HOME/.fzf && yes | $HOME/.fzf/install;
}

function _install_requirements {
    _install_if_missing cargo _install_cargo || exit 1;
    _install_if_missing forge _install_foundry || exit 1;
    _install_if_missing ldenv _install_ldenv || exit 1;
    _install_if_missing fzf _install_fzf || exit 1;
}


function _setup_system {
    _install_requirements || exit 1;
}

function install {

    # install forge-std and forge-deploy
    nogit="--no-git"
	if [[ $1 == "git" ]]; then
		nogit=""
	fi
	if [[ ! -d "lib/forge-std" ]]; then
		forge install $nogit foundry-rs/forge-std@v$forge_std || exit 1
	fi
	if [[ ! -d "lib/forge-deploy" ]]; then
		forge install $nogit wighawag/forge-deploy@v$forge_deploy || exit 1;
	fi
    
    # build forge-deploy
	if [[ ! -f "bin/forge-deploy" ]]; then
		cd lib/forge-deploy && cargo build --release || exit 1;
		cd ../..;
		# copy binary
    	mkdir -p bin && cp lib/forge-deploy/target/release/forge-deploy bin/ || exit 1
	fi
    
    # generate deployer solidity library
    ./bin/forge-deploy gen-deployer;
}

function _reinstall {
    _uninstall && install;
}

function _uninstall {
    rm -Rf lib/forge-deploy || echo "";
    rm -Rf lib/forge-std || echo "";
    rm bin/forge-deploy || echo "";
}


# -------------------------------------------------------------------------------------------------
# TASK EXECUTION
# -------------------------------------------------------------------------------------------------
function _CD { # from: https://stackoverflow.com/a/246128
	SOURCE=${BASH_SOURCE[0]}
	while [ -L "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
	DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
	SOURCE=$(readlink "$SOURCE")
	[[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
	done
	DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
	cd $DIR
}
_CD
TIMEFORMAT="Task completed in %3lR"
time ${@:-_default}
